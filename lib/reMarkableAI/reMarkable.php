<?php
/**
 * Look for email prompts in an IMAP inbox, create PDFs, send them to RMAPI
 *
 * @package reMarkableAI/reMarkableAI
 * @version 1.0
 * @license MIT
 */

namespace reMarkableAI;

use Orhanerday\OpenAi\OpenAi;
use Mpdf\Mpdf;

class reMarkable {

    /**
     * @var array Configuration values from config.php
     */
    public $config;


    /**
     * @var object HTMLExtract class object
     */
    public $html_extract;


    /**
     * @var object OpenAi class object
     */
    public $open_ai;


    /**
     * Pass in configuration values and instantiate classes.
     * 
     * @param array Configuration array from config.php
     */
    public function __construct($config)
    {
        $this->config = $config;
        $this->html_extract = new HTMLExtract;
        $this->imap = new IMAP($config, $this->html_extract);
        $this->open_ai = new OpenAi($config['openai']['key']);
    }


    /**
     * Execute shell command to use RMAPI to upload a document.
     * 
     * @param string $document Name of the file the send.
     */
    public function sendToRMAPI($document)
    {
        echo shell_exec('rmapi put '.$this->config['script_path'].'/documents/'.str_replace(' ', '\\ ', $document).' '.$this->config['rmapi']['folder']);
    }
    

    /**
     * Create a more friendly filename from a document's headline
     * 
     * @param string $headline The headline, generated by OpenAI
     * 
     * @return string A sanitized filename
     */
    public function filenameFromHeadline($headline)
    {
        $filename = str_replace('\'', '', $headline);
        $filename = str_replace(' ', '_', $filename);
        return $filename;
    }


    /**
     * Create a PDF document from the completion resopnse from OpenAI
     * 
     * @param string $headline The headline, generated by OpenAI
     * @param array $body Body content, generated by OpenAI
     * 
     * @return string The filename of the document produced
     */
    public function createResponsePdf($headline, $body)
    {
        $pdf = new \Mpdf\Mpdf();
        $filename = $this->filenameFromHeadline($headline).'_'.time().'.pdf';
        $pdf->WriteHTML($this->config['pdf']['stylesheet'], \Mpdf\HTMLParserMode::HEADER_CSS);
        $pdf->WriteHTML($body);
        $pdf->Output($this->config['script_path'].'/documents/'.$filename, \Mpdf\Output\Destination::FILE);
        return $filename;
    }


    /**
     * Send a prompt to OpenAI Completions API, get and parse the response.
     * 
     * @param string $headline The headline, generated by OpenAI
     * @param array $body Body content, generated by OpenAI
     * 
     * @return array A sanitized filename
     */
    public function getAIResponse($prompt)
    {
        // Get the response from the API
        $response = $this->generateText($prompt.$this->config['prompt_append']);
        // Parse the response
        $decoded = json_decode($response, true);
        $response_text = $decoded['choices'][0]['text'];
        $response_paragraph_array = explode(PHP_EOL, $response_text);
        $response_paragraph_array = $this->cleanArray($response_paragraph_array);
        $headline = $this->html_extract->extractH1TagsContent($response_text);
        if ( !$headline || $headline == '' ) {
            $headline = 'Prompt_Response';
        }
        $html = '';
        $paragraphs = '';
        $i = 0;
        foreach($response_paragraph_array as $paragraph) {
            if ( strlen(trim($paragraph)) != 0 ) {
                if ( $i == 0 ) {
                    $paragraphs .= '<h1>'.ltrim($paragraph, '\n').'</h1>';
                } else {
                    $paragraphs .= '<p>'.ltrim($paragraph, '\n').'</p>';
                }
            }
            $i++;
        }
        $html = '<p><strong>Prompt:</strong> '.$prompt.'</p>'.$paragraphs;
        return [
            'headline' => $headline,
            'body' => $html
        ];
    }


    public function generateText($prompt)
    {
        $response = $this->open_ai->completion([
            'prompt' => $prompt,
            'temperature' => $this->config['openai']['options']['temperature'],
            'max_tokens' => $this->config['openai']['options']['max_tokens'],
            'frequency_penalty' => $this->config['openai']['options']['frequency_penalty'],
            'presence_penalty' => $this->config['openai']['options']['presence_penalty'],
            'stream' => $this->config['openai']['options']['stream'],
        ]);
        if ( $response ) {
            return $response;
        } else {
            return false;
        }
    }


    public function getPrompts()
    {
        $email_prompts = $this->imap->getUnreadPromptEmails();
        $prompts = [];
        foreach( $email_prompts as $prompt ) {
            $body_paragraphs = $prompt['paragraphs'];
            $prompt = '';
            if ( $this->config['combine_paragraphs'] ) {
                foreach( $body_paragraphs as $body_paragraph ) {
                    $body_paragraph = strip_tags($body_paragraph, '<br>');
                    $body_paragraph = str_replace(array("\r", "\n"), '', $body_paragraph);
                    $prompt .= $body_paragraph.' ';
                }
                $prompts[] = $prompt;
            } else {
                foreach( $body_paragraphs as $body_paragraph ) {
                    $body_paragraph = strip_tags($body_paragraph, '<br>');
                    $body_paragraph = str_replace(array("\r", "\n"), '', $body_paragraph);
                    $prompts[] = $body_paragraph;
                }
            }
        }
        return $prompts;
    }


    public function removeEmptyEntries($value)
    {
        return trim($value) !== '';
    }


    public function cleanArray(array $inputArray)
    {
        $cleanedArray = array_filter($inputArray, array($this, 'removeEmptyEntries'));
        return $cleanedArray;
    }
    
}